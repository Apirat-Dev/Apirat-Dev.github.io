If you have multiple recipients for `To` and `CC` fields in your email, you can handle them in PowerShell using arrays or lists. Here’s how you can modify the script to accommodate multiple recipients:

```powershell
# Load Outlook com object
$ol = New-Object -comObject Outlook.Application

# Create a new mail item
$mail = $ol.CreateItem(0)

# Set properties of the mail item
$mail.Subject = "Subject of the email"
$mail.Body = "Body of the email"

# Define recipients (comma-separated emails within double quotes)
$mail.To = "recipient1@example.com", "recipient2@example.com"
$mail.CC = "ccrecipient1@example.com", "ccrecipient2@example.com"

# Optional: BCC recipients
$mail.BCC = "bccrecipient@example.com"

# Optional: Attachments
$mail.Attachments.Add("C:\path\to\attachment1.txt")
$mail.Attachments.Add("C:\path\to\attachment2.docx")

# Send the mail
$mail.Send()

# Display a confirmation message
Write-Host "Email sent successfully."

# Clean up COM objects
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($mail) | Out-Null
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($ol) | Out-Null
Remove-Variable ol, mail
```

### Explanation:
- **Multiple Recipients**: You can assign multiple email addresses to `To` and `CC` fields by separating them with commas within double quotes.
- **BCC**: Similarly, you can set the `BCC` field if needed.
- **Attachments**: The script demonstrates adding multiple attachments using `Attachments.Add()`.

### Handling Large Lists of Recipients:
If you have many email addresses, you might want to store them in an array or read them from a file to dynamically populate `To`, `CC`, or `BCC` fields. Here’s an example using an array:

```powershell
# Example with arrays for recipients
$toRecipients = @("recipient1@example.com", "recipient2@example.com")
$ccRecipients = @("ccrecipient1@example.com", "ccrecipient2@example.com")
$bccRecipients = @("bccrecipient@example.com")

# Set properties of the mail item
$mail.To = $toRecipients -join ","
$mail.CC = $ccRecipients -join ","
$mail.BCC = $bccRecipients -join ","
```

In this example:
- `$toRecipients`, `$ccRecipients`, and `$bccRecipients` are arrays containing email addresses.
- `-join ","` is used to concatenate the array elements into a single string separated by commas, which is suitable for assigning to `To`, `CC`, and `BCC` fields in Outlook.

Using arrays allows you to manage and manipulate lists of recipients more flexibly within your PowerShell script. Adjust the script according to your specific needs, such as reading recipients from a file or dynamically generating recipient lists based on conditions.